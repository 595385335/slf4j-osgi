/* Add bnd gradle plugin as a script dependency */
buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath bnd_plugin
  }
}

apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'eclipse'

group = 'org.osgi'
version = '1.7.0'
ext.slf4jversion = '1.7.0'
ext.buildDate = new Date()

repositories {
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/osgi-snapshots'
  }
}
dependencies {
    compile "org.slf4j:slf4j-api:${slf4jversion}"
    compile 'org.osgi:osgi.core:6.0.0'
    compile 'org.osgi:org.osgi.service.log:1.4.0-SNAPSHOT'
    testCompile 'junit:junit:3.8.2'
}

jar {
   bndfile = new File(temporaryDir, 'bnd.bnd')
   bndfile << """
Bundle-License: Apache-2.0;\
 link="http://www.apache.org/licenses/LICENSE-2.0";\
 description="Apache License, Version 2.0"
Bundle-Description: SLF4J Binding for OSGi Log Service Version ${version}.
Bundle-SymbolicName: \${replace;${baseName};-;.}
Bundle-Name: ${project.group}:${baseName}
Bundle-Copyright: Copyright (c) OSGi Alliance (${buildDate.format('yyyy')}). All Rights Reserved.
Bundle-Vendor: OSGi Alliance http://www.osgi.org/
Bundle-Version: ${version}.${buildDate.format('yyyyMMddHHmm')}
Bundle-DocURL: http://www.osgi.org/
Bundle-SCM: url=https://github.com/osgi/${baseName},\
 connection=scm:git:https://github.com/osgi/${baseName}.git,\
 developerConnection=scm:git:git@github.com:osgi/${baseName}.git
Bundle-Developers: osgi; email=info@osgi.org; name="OSGi Alliance"; organization="OSGi Alliance"
Git-Descriptor: \${system-allow-fail;git describe --dirty --always}
Git-SHA: \${system-allow-fail;git rev-list -1 HEAD}
-pom: groupid=${project.group}, artifactid=${baseName}, version=${version}
Fragment-Host: slf4j.api
Export-Package: org.slf4j.impl;version=${slf4jversion}
-sources: true
"""
}
javadoc {
  configure(options) {
    docTitle = "OSGi&trade; SLF4J Binding for OSGi Log Service Version ${project.version}"
    windowTitle = "OSGi SLF4J Binding for OSGi Log Service Version ${project.version}"
    bottom = "<font size=-1>Copyright &copy; OSGi Alliance (${buildDate.format('yyyy')}). All Rights Reserved.</font>"
    header = "<b>OSGi&trade; SLF4J Binding for OSGi Log Service</b><br/><font size=-1>Version ${project.version}</font>"
    memberLevel = JavadocMemberLevel.PROTECTED
    charSet = 'UTF-8'
    encoding = 'UTF-8'
    docEncoding = 'UTF-8'
    version = false
    use = true
    splitIndex = true
    author = false
    noDeprecated = false
    noDeprecatedList = false
    noIndex = false
    noNavBar = false
    noTree = false
    tags = ['Immutable:t:"Immutable"',
            'ThreadSafe:t:"ThreadSafe"',
            'NotThreadSafe:t:"NotThreadSafe"',
            'GuardedBy:mf:"Guarded By:"',
            'security:m:"Required Permissions"',
            'noimplement:t:"Consumers of this API must not implement this interface"']
    links('http://docs.oracle.com/javase/8/docs/api/')
  }
  /* Turn off javadoc 8 overly pedantic lint checking */
  if (JavaVersion.current().isJava8Compatible()) {
    options.addStringOption('Xdoclint:none', '-quiet') 
  }
}

task(type: Jar, 'javadocJar') {
  description 'Jar the javadoc.'
  group 'documentation'
  dependsOn javadoc
  from javadoc.destinationDir
  classifier 'javadoc'
}

task(type: Jar, 'sourcesJar') {
  description 'Jar the sources.'
  group 'documentation'
  dependsOn jar
  inputs.file jar.archivePath
  from zipTree(jar.archivePath).matching {
    include 'OSGI-OPT/src/**'
    include '*'
  }
  eachFile { FileCopyDetails fcp ->
    fcp.path = fcp.path - 'OSGI-OPT/src/'
  }
  includeEmptyDirs = false
  classifier = 'sources'
}

task('pom') {
  description 'Generate the pom file.'
  group 'documentation'
  dependsOn jar
  def pomname = "${archivesBaseName}-${version}.pom"
  ext.pomfile = new File(jar.destinationDir, pomname)
  inputs.file jar.archivePath
  outputs.file pomfile
  doLast {
    copy {
      from zipTree(jar.archivePath).matching {
        include "META-INF/maven/${project.group}/${archivesBaseName}/pom.xml"
      }
      eachFile { FileCopyDetails fcp ->
        fcp.path = pomname
      }
      into pomfile.parentFile
      includeEmptyDirs = false
    }
  } 
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives(pom.pomfile) {
    builtBy pom
  }
}

task wrapper(type: Wrapper) {
  jarFile = rootProject.file('.gradle-wrapper/gradle-wrapper.jar')
}
